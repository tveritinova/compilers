
%{
  #include <iostream>
  #include <string>
  #include "AST/grammar.h"
  #include "AST/expression.h"
  #include "AST/statement.h"
  #include "AST/type.h"
  #include "AST/treeserializer.h"

  extern "C" int yylex();

  void yyerror(const char* str)
  {
      std::cerr << "ERROR: " << str << std::endl;
  }

  Program* program;

%}

%locations

%token IF;
%token ELSE;
%token WHILE;

%token CLASS;

%token THIS;
%token NEW;

%token MAIN;

%token PUBLIC;
%token EXTENDS;

%token INT;
%token BOOL;
%token STRING;

%token SQBR_L;
%token SQBR_R;
%token RNDBR_L;
%token RNDBR_R;
%token BTBR_L;
%token BTBR_R;

%token COMMA;
%token DOT;
%token SEMICOLON;

%token EQ;
%token AND;
%token OR;
%token PLUS;
%token MINUS;
%token STAR;
%token LESS;
%token EXCL;

%token FALSE;
%token TRUE;

%token PRINT;

%token LEN;

%token RETURN;

%token  END 0

%token  <intval>  NUM
%token  <strValue> ID


%union {
    SymbolTable::Symbol* symbol;
    int intval;
    char* strValue;
    Program* program;
    MainClass* main_class;
    ClassDecl *class_dec;
    ClassDeclList *class_dec_list;
    VarDecl* var_dec;
    VarDeclList* var_dec_list;
    MethodDecl* method;
    MethodDeclList* method_list;
    ArgumentList* arg_list;
    Type* type;
    StatementList* statement_list;
    Statement* statement;
    ExpressionList* expression_list;
    Expression* expression;
    SymbolTable::Symbol* id;
}

%type   <id>                id;
%type   <program>           goal
%type   <main_class>        main_class
%type   <class_dec_list>    class_dec_list
%type   <class_dec>         class_dec
%type   <var_dec_list>      var_dec_list
%type   <var_dec>           var_dec
%type   <method_list>   method_list
%type   <method>        method
%type   <arg_list>          arglist
%type   <type>              type
%type   <statement_list>    stmnt_list
%type   <statement>         statement
%type   <expression_list>   expression_list
%type   <expression_list>   expression_add

%type   <expression>        expression
%type   <id>                extends_block

%nonassoc AND
%nonassoc LESS

%left MINUS PLUS
%left STAR
%left DOT
%left SQBR_L
%right EXCL

%start goal

%%


goal :

      main_class class_dec_list

        { $$ = new Program($1, $2); program = $$; }
;


main_class : 

      CLASS id BTBR_L 
        PUBLIC MAIN RNDBR_L STRING SQBR_L SQBR_R id RNDBR_R
        BTBR_L statement BTBR_R
      BTBR_R

        { $$ = new MainClass($2, $10, $13, Position(@1.first_line, @1.first_column)); }
;


class_dec :

      CLASS id extends_block BTBR_L
        var_dec_list 
        method_list
      BTBR_R

        { $$ = new ClassDecl($2, $3, $5, $6, Position(@1.first_line, @1.first_column)); }

    | CLASS id extends_block BTBR_L
        method_list
      BTBR_R

        { $$ = new ClassDecl($2, $3, nullptr, $5, Position(@1.first_line, @1.first_column)); }
;


class_dec_list :

      class_dec_list class_dec

        { $$ = new ClassDeclList($2, $1); }

    |   { $$ = nullptr; }
;


extends_block :
      
      EXTENDS id

        { $$ = $2; }

    |   { $$ = nullptr; }
;


var_dec:

      type id SEMICOLON

        { $$ = new VarDecl($1, $2, Position(@1.first_line, @1.first_column)); }
;


var_dec_list: 

      var_dec_list var_dec

        { $$ = new VarDeclList($2, $1); }

    | var_dec  

        { $$ = new VarDeclList($1, nullptr); };


method : 

      PUBLIC type id 
      RNDBR_L arglist RNDBR_R 
      BTBR_L 
        var_dec_list 
        stmnt_list 
        RETURN expression SEMICOLON 
      BTBR_R

        { $$ = new MethodDecl($2, $3, $5, $8, $9, $11, Position(@1.first_line, @1.first_column)); }

    | PUBLIC type id 
      RNDBR_L arglist RNDBR_R 
      BTBR_L 
        stmnt_list 
        RETURN expression SEMICOLON 
      BTBR_R

        { $$ = new MethodDecl($2, $3, $5, nullptr, $8, $10, Position(@1.first_line, @1.first_column)); }

    | PUBLIC type id 
      RNDBR_L arglist RNDBR_R 
      BTBR_L 
        var_dec_list 
        RETURN expression SEMICOLON 
      BTBR_R

        { $$ = new MethodDecl($2, $3, $5, $8, nullptr, $10, Position(@1.first_line, @1.first_column)); }

    | PUBLIC type id 
      RNDBR_L arglist RNDBR_R 
      BTBR_L 
        RETURN expression SEMICOLON 
      BTBR_R

        { $$ = new MethodDecl($2, $3, $5, nullptr, nullptr, $9, Position(@1.first_line, @1.first_column)); }
;


method_list: 
    
      method_list method
      
        { $$ = new MethodDeclList($2, $1); }
    
    |   { $$ = nullptr; }
;


arglist: 

      arglist COMMA type id 

        { $$ = new ArgumentList($3, $4, $1, Position(@1.first_line, @1.first_column)); }

    | type id

        { $$ = new ArgumentList($1, $2, nullptr, Position(@1.first_line, @1.first_column)); }

    |   { $$ = nullptr; }
; 


stmnt_list: 

      stmnt_list statement  

        { $$ = new StatementList($2, $1); }

    | statement  

        { $$ = new StatementList($1, nullptr);; }
;


type:

      INT SQBR_L SQBR_R

        { $$ = new BasicType(INT_ARRAY_); }

    | BOOL

        { $$ = new BasicType(BOOL_); }

    | INT

        { $$ = new BasicType(INT_); }

    | id

        { $$ = new ClassType((SymbolTable::

        Symbol *)($1)); }
;


statement : 

      BTBR_L stmnt_list BTBR_R 	

        { $$ = $2; }

  	| IF RNDBR_L expression RNDBR_R statement ELSE statement  

        { $$ = new IfStatement($3, $5, $7, Position(@1.first_line, @1.first_column)); }

  	| WHILE RNDBR_L expression RNDBR_R statement 	

        { $$ = new WhileStatement($3, $5, Position(@1.first_line, @1.first_column)); }

		| PRINT RNDBR_L expression RNDBR_R SEMICOLON 	

        { $$ = new PrintStatement($3, Position(@1.first_line, @1.first_column)); }

  	| id EQ expression SEMICOLON 	

        { $$ = new AssignStatement($1, $3, Position(@1.first_line, @1.first_column)); }

  	| id SQBR_L expression SQBR_R EQ expression SEMICOLON 	

        { $$ = new AssignSubscriptStatement($1, $3, $6, Position(@1.first_line, @1.first_column)); }
;


expression : 

      expression AND expression 		

        { $$ = new BinaryExpression($1, BinaryOperator::AND_, $3, Position(@1.first_line, @1.first_column)); }

    | expression LESS expression 		

        { $$ = new BinaryExpression($1, BinaryOperator::LESS_, $3, Position(@1.first_line, @1.first_column)); }

		| expression PLUS expression 		

        { $$ = new BinaryExpression($1, BinaryOperator::ADD_, $3, Position(@1.first_line, @1.first_column)); }

		| expression MINUS expression 	

        { $$ = new BinaryExpression($1, BinaryOperator::SUB_, $3, Position(@1.first_line, @1.first_column)); }

    | expression STAR expression  	

        { $$ = new BinaryExpression($1, BinaryOperator::MUL_, $3, Position(@1.first_line, @1.first_column)); }

		| expression SQBR_L expression SQBR_R		

        { $$ = new SubscriptExpression($1, $3, Position(@1.first_line, @1.first_column)); }

		| expression DOT LEN	

        { $$ = new LengthExpression($1, Position(@1.first_line, @1.first_column)); }

		| expression DOT id RNDBR_L expression_list RNDBR_R 	

        { $$ = new MethodCallExpression($1, $3, $5, Position(@1.first_line, @1.first_column)); }

		| NUM  	

        { $$ = new IntExpression(yylval.intval, Position(@1.first_line, @1.first_column)); }

		| TRUE 	

        { $$ = new BoolExpression(true, Position(@1.first_line, @1.first_column)); }

		| FALSE 

        { $$ = new BoolExpression(false, Position(@1.first_line, @1.first_column)); }

		| id 

        { $$ = new IdExpression($1, Position(@1.first_line, @1.first_column)); }

		| THIS 

        { $$ = new ThisExpression(); }

		| NEW INT SQBR_L expression SQBR_R 

        { $$ = new NewIntArrayExpression($4, Position(@1.first_line, @1.first_column)); }

		| NEW id RNDBR_L RNDBR_R 

        { $$ = new NewObjectExpression($2, Position(@1.first_line, @1.first_column)); }

		| EXCL expression 

        { $$ = new NegationExpression($2, Position(@1.first_line, @1.first_column)); }

		| RNDBR_L expression RNDBR_R 

        { $$ = $2; }
;


expression_list:
    
      expression expression_add

        { $$ = new ExpressionList($1, $2); }

    |   { $$ = nullptr;}
;

expression_add:

      expression_add COMMA expression

        { $$ = new ExpressionList($3, $1); }

    |   { $$ = nullptr;}
;

id : 

      ID 

        { $$ = SymbolTable::Symbol::GetIntern(yyval.strValue);}
;

%%